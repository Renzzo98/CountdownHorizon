import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
let CountdownTimer = class CountdownTimer {
    constructor() {
        this.fns = [];
        this.commands = [];
        this.ing = false;
    }
    start() {
        if (this.ing === true)
            return;
        this.ing = true;
        this.nextTime = +new Date();
        this.process();
    }
    process() {
        while (this.commands.length) {
            this.commands.shift()();
        }
        let diff = +new Date() - this.nextTime;
        const count = 1 + Math.floor(diff / 100);
        diff = 100 - (diff % 100);
        this.nextTime += 100 * count;
        for (let i = 0, len = this.fns.length; i < len; i += 2) {
            let frequency = this.fns[i + 1];
            // 100/s
            if (0 === frequency) {
                this.fns[i](count);
                // 1000/s
            }
            else {
                // 先把末位至0，再每次加2
                frequency += 2 * count - 1;
                const step = Math.floor(frequency / 20);
                if (step > 0) {
                    this.fns[i](step);
                }
                // 把末位还原成1
                this.fns[i + 1] = (frequency % 20) + 1;
            }
        }
        if (!this.ing)
            return;
        setTimeout(() => this.process(), diff);
    }
    add(fn, frequency) {
        this.commands.push(() => {
            this.fns.push(fn);
            this.fns.push(frequency === 1000 ? 1 : 0);
            this.ing = true;
        });
        return this;
    }
    remove(fn) {
        this.commands.push(() => {
            const i = this.fns.indexOf(fn);
            if (i !== -1) {
                this.fns.splice(i, 2);
            }
            this.ing = this.fns.length > 0;
        });
        return this;
    }
};
CountdownTimer = tslib_1.__decorate([
    Injectable()
], CountdownTimer);
export { CountdownTimer };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY291bnRkb3duLnRpbWVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWNvdW50ZG93bi8iLCJzb3VyY2VzIjpbImNvdW50ZG93bi50aW1lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUczQyxJQUFhLGNBQWMsR0FBM0IsTUFBYSxjQUFjO0lBRDNCO1FBRVUsUUFBRyxHQUF1RCxFQUFFLENBQUM7UUFDN0QsYUFBUSxHQUFzQixFQUFFLENBQUM7UUFFakMsUUFBRyxHQUFHLEtBQUssQ0FBQztJQWlFdEIsQ0FBQztJQS9EQyxLQUFLO1FBQ0gsSUFBSSxJQUFJLENBQUMsR0FBRyxLQUFLLElBQUk7WUFBRSxPQUFPO1FBRTlCLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDO1FBQ2hCLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQzVCLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNqQixDQUFDO0lBRU8sT0FBTztRQUNiLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUU7WUFDM0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO1NBQ3pCO1FBQ0QsSUFBSSxJQUFJLEdBQUcsQ0FBQyxJQUFJLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDdkMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBRXpDLElBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFDMUIsSUFBSSxDQUFDLFFBQVEsSUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDO1FBRTdCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDdEQsSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFXLENBQUM7WUFFMUMsUUFBUTtZQUNSLElBQUksQ0FBQyxLQUFLLFNBQVMsRUFBRTtnQkFDbEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQTZCLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ2hELFNBQVM7YUFDVjtpQkFBTTtnQkFDTCxlQUFlO2dCQUNmLFNBQVMsSUFBSSxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsQ0FBQztnQkFFM0IsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDLENBQUM7Z0JBQ3hDLElBQUksSUFBSSxHQUFHLENBQUMsRUFBRTtvQkFDWCxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBNkIsQ0FBQyxJQUFJLENBQUMsQ0FBQztpQkFDaEQ7Z0JBRUQsVUFBVTtnQkFDVixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDeEM7U0FDRjtRQUVELElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRztZQUFFLE9BQU87UUFFdEIsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQsR0FBRyxDQUFDLEVBQWMsRUFBRSxTQUFpQjtRQUNuQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDdEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDbEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMxQyxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQztRQUNsQixDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELE1BQU0sQ0FBQyxFQUFjO1FBQ25CLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUN0QixNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUMvQixJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtnQkFDWixJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7YUFDdkI7WUFDRCxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUNqQyxDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztDQUNGLENBQUE7QUFyRVksY0FBYztJQUQxQixVQUFVLEVBQUU7R0FDQSxjQUFjLENBcUUxQjtTQXJFWSxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ291bnRkb3duVGltZXIge1xuICBwcml2YXRlIGZuczogQXJyYXk8KChjb3VudDogbnVtYmVyKSA9PiBudW1iZXIgfCB2b2lkKSB8IG51bWJlcj4gPSBbXTtcbiAgcHJpdmF0ZSBjb21tYW5kczogQXJyYXk8KCkgPT4gdm9pZD4gPSBbXTtcbiAgcHJpdmF0ZSBuZXh0VGltZTogbnVtYmVyO1xuICBwcml2YXRlIGluZyA9IGZhbHNlO1xuXG4gIHN0YXJ0KCkge1xuICAgIGlmICh0aGlzLmluZyA9PT0gdHJ1ZSkgcmV0dXJuO1xuXG4gICAgdGhpcy5pbmcgPSB0cnVlO1xuICAgIHRoaXMubmV4dFRpbWUgPSArbmV3IERhdGUoKTtcbiAgICB0aGlzLnByb2Nlc3MoKTtcbiAgfVxuXG4gIHByaXZhdGUgcHJvY2VzcygpIHtcbiAgICB3aGlsZSAodGhpcy5jb21tYW5kcy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuY29tbWFuZHMuc2hpZnQoKSgpO1xuICAgIH1cbiAgICBsZXQgZGlmZiA9ICtuZXcgRGF0ZSgpIC0gdGhpcy5uZXh0VGltZTtcbiAgICBjb25zdCBjb3VudCA9IDEgKyBNYXRoLmZsb29yKGRpZmYgLyAxMDApO1xuXG4gICAgZGlmZiA9IDEwMCAtIChkaWZmICUgMTAwKTtcbiAgICB0aGlzLm5leHRUaW1lICs9IDEwMCAqIGNvdW50O1xuXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHRoaXMuZm5zLmxlbmd0aDsgaSA8IGxlbjsgaSArPSAyKSB7XG4gICAgICBsZXQgZnJlcXVlbmN5ID0gdGhpcy5mbnNbaSArIDFdIGFzIG51bWJlcjtcblxuICAgICAgLy8gMTAwL3NcbiAgICAgIGlmICgwID09PSBmcmVxdWVuY3kpIHtcbiAgICAgICAgKHRoaXMuZm5zW2ldIGFzIChjb3VudDogbnVtYmVyKSA9PiB2b2lkKShjb3VudCk7XG4gICAgICAgIC8vIDEwMDAvc1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8g5YWI5oqK5pyr5L2N6IezMO+8jOWGjeavj+asoeWKoDJcbiAgICAgICAgZnJlcXVlbmN5ICs9IDIgKiBjb3VudCAtIDE7XG5cbiAgICAgICAgY29uc3Qgc3RlcCA9IE1hdGguZmxvb3IoZnJlcXVlbmN5IC8gMjApO1xuICAgICAgICBpZiAoc3RlcCA+IDApIHtcbiAgICAgICAgICAodGhpcy5mbnNbaV0gYXMgKGNvdW50OiBudW1iZXIpID0+IHZvaWQpKHN0ZXApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8g5oqK5pyr5L2N6L+Y5Y6f5oiQMVxuICAgICAgICB0aGlzLmZuc1tpICsgMV0gPSAoZnJlcXVlbmN5ICUgMjApICsgMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuaW5nKSByZXR1cm47XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMucHJvY2VzcygpLCBkaWZmKTtcbiAgfVxuXG4gIGFkZChmbjogKCkgPT4gdm9pZCwgZnJlcXVlbmN5OiBudW1iZXIpOiB0aGlzIHtcbiAgICB0aGlzLmNvbW1hbmRzLnB1c2goKCkgPT4ge1xuICAgICAgdGhpcy5mbnMucHVzaChmbik7XG4gICAgICB0aGlzLmZucy5wdXNoKGZyZXF1ZW5jeSA9PT0gMTAwMCA/IDEgOiAwKTtcbiAgICAgIHRoaXMuaW5nID0gdHJ1ZTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHJlbW92ZShmbjogKCkgPT4gdm9pZCk6IHRoaXMge1xuICAgIHRoaXMuY29tbWFuZHMucHVzaCgoKSA9PiB7XG4gICAgICBjb25zdCBpID0gdGhpcy5mbnMuaW5kZXhPZihmbik7XG4gICAgICBpZiAoaSAhPT0gLTEpIHtcbiAgICAgICAgdGhpcy5mbnMuc3BsaWNlKGksIDIpO1xuICAgICAgfVxuICAgICAgdGhpcy5pbmcgPSB0aGlzLmZucy5sZW5ndGggPiAwO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG59XG4iXX0=