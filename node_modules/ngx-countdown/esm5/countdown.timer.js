import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
var CountdownTimer = /** @class */ (function () {
    function CountdownTimer() {
        this.fns = [];
        this.commands = [];
        this.ing = false;
    }
    CountdownTimer.prototype.start = function () {
        if (this.ing === true)
            return;
        this.ing = true;
        this.nextTime = +new Date();
        this.process();
    };
    CountdownTimer.prototype.process = function () {
        var _this = this;
        while (this.commands.length) {
            this.commands.shift()();
        }
        var diff = +new Date() - this.nextTime;
        var count = 1 + Math.floor(diff / 100);
        diff = 100 - (diff % 100);
        this.nextTime += 100 * count;
        for (var i = 0, len = this.fns.length; i < len; i += 2) {
            var frequency = this.fns[i + 1];
            // 100/s
            if (0 === frequency) {
                this.fns[i](count);
                // 1000/s
            }
            else {
                // 先把末位至0，再每次加2
                frequency += 2 * count - 1;
                var step = Math.floor(frequency / 20);
                if (step > 0) {
                    this.fns[i](step);
                }
                // 把末位还原成1
                this.fns[i + 1] = (frequency % 20) + 1;
            }
        }
        if (!this.ing)
            return;
        setTimeout(function () { return _this.process(); }, diff);
    };
    CountdownTimer.prototype.add = function (fn, frequency) {
        var _this = this;
        this.commands.push(function () {
            _this.fns.push(fn);
            _this.fns.push(frequency === 1000 ? 1 : 0);
            _this.ing = true;
        });
        return this;
    };
    CountdownTimer.prototype.remove = function (fn) {
        var _this = this;
        this.commands.push(function () {
            var i = _this.fns.indexOf(fn);
            if (i !== -1) {
                _this.fns.splice(i, 2);
            }
            _this.ing = _this.fns.length > 0;
        });
        return this;
    };
    CountdownTimer = tslib_1.__decorate([
        Injectable()
    ], CountdownTimer);
    return CountdownTimer;
}());
export { CountdownTimer };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY291bnRkb3duLnRpbWVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWNvdW50ZG93bi8iLCJzb3VyY2VzIjpbImNvdW50ZG93bi50aW1lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUczQztJQURBO1FBRVUsUUFBRyxHQUF1RCxFQUFFLENBQUM7UUFDN0QsYUFBUSxHQUFzQixFQUFFLENBQUM7UUFFakMsUUFBRyxHQUFHLEtBQUssQ0FBQztJQWlFdEIsQ0FBQztJQS9EQyw4QkFBSyxHQUFMO1FBQ0UsSUFBSSxJQUFJLENBQUMsR0FBRyxLQUFLLElBQUk7WUFBRSxPQUFPO1FBRTlCLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDO1FBQ2hCLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQzVCLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNqQixDQUFDO0lBRU8sZ0NBQU8sR0FBZjtRQUFBLGlCQWtDQztRQWpDQyxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFO1lBQzNCLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQztTQUN6QjtRQUNELElBQUksSUFBSSxHQUFHLENBQUMsSUFBSSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQ3ZDLElBQU0sS0FBSyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQztRQUV6QyxJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQzFCLElBQUksQ0FBQyxRQUFRLElBQUksR0FBRyxHQUFHLEtBQUssQ0FBQztRQUU3QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3RELElBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBVyxDQUFDO1lBRTFDLFFBQVE7WUFDUixJQUFJLENBQUMsS0FBSyxTQUFTLEVBQUU7Z0JBQ2xCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUE2QixDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUNoRCxTQUFTO2FBQ1Y7aUJBQU07Z0JBQ0wsZUFBZTtnQkFDZixTQUFTLElBQUksQ0FBQyxHQUFHLEtBQUssR0FBRyxDQUFDLENBQUM7Z0JBRTNCLElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQyxDQUFDO2dCQUN4QyxJQUFJLElBQUksR0FBRyxDQUFDLEVBQUU7b0JBQ1gsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQTZCLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBQ2hEO2dCQUVELFVBQVU7Z0JBQ1YsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ3hDO1NBQ0Y7UUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUc7WUFBRSxPQUFPO1FBRXRCLFVBQVUsQ0FBQyxjQUFNLE9BQUEsS0FBSSxDQUFDLE9BQU8sRUFBRSxFQUFkLENBQWMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQsNEJBQUcsR0FBSCxVQUFJLEVBQWMsRUFBRSxTQUFpQjtRQUFyQyxpQkFPQztRQU5DLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO1lBQ2pCLEtBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ2xCLEtBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDMUMsS0FBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUM7UUFDbEIsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCwrQkFBTSxHQUFOLFVBQU8sRUFBYztRQUFyQixpQkFTQztRQVJDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO1lBQ2pCLElBQU0sQ0FBQyxHQUFHLEtBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQy9CLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO2dCQUNaLEtBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQzthQUN2QjtZQUNELEtBQUksQ0FBQyxHQUFHLEdBQUcsS0FBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBQ2pDLENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBcEVVLGNBQWM7UUFEMUIsVUFBVSxFQUFFO09BQ0EsY0FBYyxDQXFFMUI7SUFBRCxxQkFBQztDQUFBLEFBckVELElBcUVDO1NBckVZLGNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDb3VudGRvd25UaW1lciB7XG4gIHByaXZhdGUgZm5zOiBBcnJheTwoKGNvdW50OiBudW1iZXIpID0+IG51bWJlciB8IHZvaWQpIHwgbnVtYmVyPiA9IFtdO1xuICBwcml2YXRlIGNvbW1hbmRzOiBBcnJheTwoKSA9PiB2b2lkPiA9IFtdO1xuICBwcml2YXRlIG5leHRUaW1lOiBudW1iZXI7XG4gIHByaXZhdGUgaW5nID0gZmFsc2U7XG5cbiAgc3RhcnQoKSB7XG4gICAgaWYgKHRoaXMuaW5nID09PSB0cnVlKSByZXR1cm47XG5cbiAgICB0aGlzLmluZyA9IHRydWU7XG4gICAgdGhpcy5uZXh0VGltZSA9ICtuZXcgRGF0ZSgpO1xuICAgIHRoaXMucHJvY2VzcygpO1xuICB9XG5cbiAgcHJpdmF0ZSBwcm9jZXNzKCkge1xuICAgIHdoaWxlICh0aGlzLmNvbW1hbmRzLmxlbmd0aCkge1xuICAgICAgdGhpcy5jb21tYW5kcy5zaGlmdCgpKCk7XG4gICAgfVxuICAgIGxldCBkaWZmID0gK25ldyBEYXRlKCkgLSB0aGlzLm5leHRUaW1lO1xuICAgIGNvbnN0IGNvdW50ID0gMSArIE1hdGguZmxvb3IoZGlmZiAvIDEwMCk7XG5cbiAgICBkaWZmID0gMTAwIC0gKGRpZmYgJSAxMDApO1xuICAgIHRoaXMubmV4dFRpbWUgKz0gMTAwICogY291bnQ7XG5cbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gdGhpcy5mbnMubGVuZ3RoOyBpIDwgbGVuOyBpICs9IDIpIHtcbiAgICAgIGxldCBmcmVxdWVuY3kgPSB0aGlzLmZuc1tpICsgMV0gYXMgbnVtYmVyO1xuXG4gICAgICAvLyAxMDAvc1xuICAgICAgaWYgKDAgPT09IGZyZXF1ZW5jeSkge1xuICAgICAgICAodGhpcy5mbnNbaV0gYXMgKGNvdW50OiBudW1iZXIpID0+IHZvaWQpKGNvdW50KTtcbiAgICAgICAgLy8gMTAwMC9zXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyDlhYjmiormnKvkvY3oh7Mw77yM5YaN5q+P5qyh5YqgMlxuICAgICAgICBmcmVxdWVuY3kgKz0gMiAqIGNvdW50IC0gMTtcblxuICAgICAgICBjb25zdCBzdGVwID0gTWF0aC5mbG9vcihmcmVxdWVuY3kgLyAyMCk7XG4gICAgICAgIGlmIChzdGVwID4gMCkge1xuICAgICAgICAgICh0aGlzLmZuc1tpXSBhcyAoY291bnQ6IG51bWJlcikgPT4gdm9pZCkoc3RlcCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyDmiormnKvkvY3ov5jljp/miJAxXG4gICAgICAgIHRoaXMuZm5zW2kgKyAxXSA9IChmcmVxdWVuY3kgJSAyMCkgKyAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghdGhpcy5pbmcpIHJldHVybjtcblxuICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5wcm9jZXNzKCksIGRpZmYpO1xuICB9XG5cbiAgYWRkKGZuOiAoKSA9PiB2b2lkLCBmcmVxdWVuY3k6IG51bWJlcik6IHRoaXMge1xuICAgIHRoaXMuY29tbWFuZHMucHVzaCgoKSA9PiB7XG4gICAgICB0aGlzLmZucy5wdXNoKGZuKTtcbiAgICAgIHRoaXMuZm5zLnB1c2goZnJlcXVlbmN5ID09PSAxMDAwID8gMSA6IDApO1xuICAgICAgdGhpcy5pbmcgPSB0cnVlO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcmVtb3ZlKGZuOiAoKSA9PiB2b2lkKTogdGhpcyB7XG4gICAgdGhpcy5jb21tYW5kcy5wdXNoKCgpID0+IHtcbiAgICAgIGNvbnN0IGkgPSB0aGlzLmZucy5pbmRleE9mKGZuKTtcbiAgICAgIGlmIChpICE9PSAtMSkge1xuICAgICAgICB0aGlzLmZucy5zcGxpY2UoaSwgMik7XG4gICAgICB9XG4gICAgICB0aGlzLmluZyA9IHRoaXMuZm5zLmxlbmd0aCA+IDA7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cbiJdfQ==