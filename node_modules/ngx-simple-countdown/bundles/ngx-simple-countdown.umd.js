(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('ngx-simple-countdown', ['exports', '@angular/core', 'rxjs', 'rxjs/operators'], factory) :
    (factory((global['ngx-simple-countdown'] = {}),global.ng.core,global.rxjs,global.rxjs.operators));
}(this, (function (exports,core,rxjs,operators) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxSimpleCountdownDirective = /** @class */ (function () {
        function NgxSimpleCountdownDirective(elementRef) {
            this.elementRef = elementRef;
            this.language = 'en';
            this.reactive = true;
            this.endMessage = 'countdown finish';
            this.hideUnit = '';
            this.styles = 'font-size:20px;color:#FFF;background-color:#000;padding:10px 5px;font-weight:bold;min-width:40px;text-align:center;';
        }
        /**
         * @return {?}
         */
        NgxSimpleCountdownDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.getDateNow();
                this.setLanguage(this.language);
                this.initSimpleCountdown();
            };
        /**
         * @return {?}
         */
        NgxSimpleCountdownDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () { };
        /**
         * @private
         * @return {?}
         */
        NgxSimpleCountdownDirective.prototype.initSimpleCountdown = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                this.totalSecondes = this.dateTo - this.dateNow;
                this.countdownResult = this.updateSimpleCountdown(this.totalSecondes);
                this.createHTML();
                this.interval$ = rxjs.interval(1000).pipe(operators.takeUntil(this.componentDestroyed(this)), operators.filter(( /**
                 * @param {?} _
                 * @return {?}
                 */function (_) { return _this.reactive && _this.totalSecondes > 0; })), operators.tap(( /**
                 * @param {?} _
                 * @return {?}
                 */function (_) { return _this.totalSecondes--; })), operators.tap(( /**
                 * @param {?} _
                 * @return {?}
                 */function (_) {
                    return (_this.countdownResult = _this.updateSimpleCountdown(_this.totalSecondes));
                })), operators.tap(( /**
                 * @param {?} _
                 * @return {?}
                 */function (_) { return _this.createHTML(); })));
                this.interval$.subscribe();
            };
        /**
         * @private
         * @return {?}
         */
        NgxSimpleCountdownDirective.prototype.createHTML = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var o = '';
                if (this.totalSecondes > 0) {
                    o = '<div style="display:flex;">';
                    if (this.isContent('d')) {
                        if (this.countdownResult.day > 0) {
                            o += "<div style=\"" + this.styles + "\">\n          " + this.countdownResult.day + this.keywords.day + "\n          </div>";
                        }
                    }
                    if (this.isContent('h')) {
                        if (this.countdownResult.hours > 0 || this.countdownResult.day > 0) {
                            o += "<div style=\"" + this.styles + "\">\n          " + this.countdownResult.hours + this.keywords.hours + "\n        </div>";
                        }
                    }
                    if (this.isContent('m')) {
                        if ((this.countdownResult.minutes > 0 ||
                            this.countdownResult.hours > 0 ||
                            this.countdownResult.day > 0) &&
                            this.reactive) {
                            o += "<div style=\"" + this.styles + "\">\n          " + this.countdownResult.minutes + this.keywords.minutes + "\n        </div>";
                        }
                    }
                    if (this.isContent('s')) {
                        if ((this.countdownResult.seconds > 0 ||
                            this.countdownResult.minutes > 0 ||
                            this.countdownResult.hours > 0 ||
                            this.countdownResult.day > 0) &&
                            this.reactive) {
                            o += "<div style=\"" + this.styles + "\">\n          " + this.countdownResult.seconds + this.keywords.seconds + "\n        </div>";
                        }
                        o += '</div>';
                    }
                }
                else {
                    if (this.endMessage !== '') {
                        o += "<div style=\"" + this.styles + "\">" + this.endMessage + "</div>";
                    }
                }
                this.elementRef.nativeElement.innerHTML = o;
            };
        /**
         * @private
         * @param {?} unit
         * @return {?}
         */
        NgxSimpleCountdownDirective.prototype.isContent = /**
         * @private
         * @param {?} unit
         * @return {?}
         */
            function (unit) {
                return !this.hideUnit.includes(unit);
            };
        /**
         * @private
         * @param {?} secondes
         * @return {?}
         */
        NgxSimpleCountdownDirective.prototype.updateSimpleCountdown = /**
         * @private
         * @param {?} secondes
         * @return {?}
         */
            function (secondes) {
                /** @type {?} */
                var Seconds = Math.floor((secondes / 1) % 60);
                /** @type {?} */
                var Minutes = Math.floor((secondes / 1 / 60) % 60);
                /** @type {?} */
                var Hours = Math.floor((secondes / (1 * 60 * 60)) % 24);
                /** @type {?} */
                var Day = Math.floor(secondes / (1 * 60 * 60 * 24));
                return {
                    day: Day,
                    hours: Hours,
                    minutes: Minutes,
                    seconds: Seconds
                };
            };
        /**
         * @private
         * @return {?}
         */
        NgxSimpleCountdownDirective.prototype.getDateNow = /**
         * @private
         * @return {?}
         */
            function () {
                this.dateNow = Math.floor(Date.now() / 1000);
            };
        /**
         * @private
         * @param {?} language
         * @return {?}
         */
        NgxSimpleCountdownDirective.prototype.setLanguage = /**
         * @private
         * @param {?} language
         * @return {?}
         */
            function (language) {
                if (language === 'fr') {
                    this.keywords = {
                        seconds: 's',
                        minutes: 'm',
                        hours: 'h',
                        day: 'j'
                    };
                }
                else if (language === 'de') {
                    this.keywords = {
                        seconds: 'z',
                        minutes: 'm',
                        hours: 's',
                        day: 't'
                    };
                }
                else if (language === 'es' || language === 'pt') {
                    this.keywords = {
                        seconds: 's',
                        minutes: 'm',
                        hours: 's',
                        day: 'd'
                    };
                }
                else if (language === 'cs') {
                    this.keywords = {
                        seconds: 's',
                        minutes: 'm',
                        hours: 'h',
                        day: 'd'
                    };
                }
                else if (language === 'pl') {
                    this.keywords = {
                        seconds: 's',
                        minutes: 'm',
                        hours: 'g',
                        day: 'd'
                    };
                }
                else {
                    this.keywords = {
                        seconds: 's',
                        minutes: 'm',
                        hours: 'h',
                        day: 'd'
                    };
                }
            };
        /**
         * @private
         * @param {?} component
         * @return {?}
         */
        NgxSimpleCountdownDirective.prototype.componentDestroyed = /**
         * @private
         * @param {?} component
         * @return {?}
         */
            function (component) {
                /** @type {?} */
                var oldNgOnDestroy = component.ngOnDestroy;
                /** @type {?} */
                var destroyed$ = new rxjs.ReplaySubject(1);
                component.ngOnDestroy = ( /**
                 * @return {?}
                 */function () {
                    oldNgOnDestroy.apply(component);
                    destroyed$.next(undefined);
                    destroyed$.complete();
                });
                return destroyed$;
            };
        NgxSimpleCountdownDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[simpleCountdown]'
                    },] }
        ];
        /** @nocollapse */
        NgxSimpleCountdownDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef }
            ];
        };
        NgxSimpleCountdownDirective.propDecorators = {
            dateTo: [{ type: core.Input }],
            language: [{ type: core.Input }],
            reactive: [{ type: core.Input }],
            endMessage: [{ type: core.Input }],
            hideUnit: [{ type: core.Input }],
            styles: [{ type: core.Input }]
        };
        return NgxSimpleCountdownDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxSimpleCountdownModule = /** @class */ (function () {
        function NgxSimpleCountdownModule() {
        }
        NgxSimpleCountdownModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgxSimpleCountdownDirective],
                        imports: [],
                        exports: [NgxSimpleCountdownDirective]
                    },] }
        ];
        return NgxSimpleCountdownModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.NgxSimpleCountdownModule = NgxSimpleCountdownModule;
    exports.NgxSimpleCountdownDirective = NgxSimpleCountdownDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngx-simple-countdown.umd.js.map