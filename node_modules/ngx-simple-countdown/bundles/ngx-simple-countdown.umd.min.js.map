{"version":3,"sources":["ng://ngx-simple-countdown/lib/ngx-simple-countdown.directive.ts","ng://ngx-simple-countdown/lib/ngx-simple-countdown.module.ts"],"names":["NgxSimpleCountdownDirective","elementRef","this","language","reactive","endMessage","hideUnit","styles","prototype","ngOnInit","getDateNow","setLanguage","initSimpleCountdown","ngOnDestroy","_this","totalSecondes","dateTo","dateNow","countdownResult","updateSimpleCountdown","createHTML","interval$","interval","pipe","takeUntil","componentDestroyed","filter","_","tap","subscribe","o","isContent","day","keywords","hours","minutes","seconds","nativeElement","innerHTML","unit","includes","secondes","Seconds","Math","floor","Minutes","Hours","Date","now","component","oldNgOnDestroy","destroyed$","ReplaySubject","apply","next","undefined","complete","Directive","args","selector","ElementRef","Input","NgxSimpleCountdownModule","NgModule","declarations","imports","exports"],"mappings":"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","sourcesContent":["import { Directive, Input, ElementRef, OnDestroy, OnInit } from '@angular/core';\nimport * as fromModel from './models';\nimport { interval, Observable, ReplaySubject } from 'rxjs';\nimport { tap, takeUntil, filter } from 'rxjs/operators';\n\n@Directive({\n  selector: '[simpleCountdown]'\n})\nexport class NgxSimpleCountdownDirective implements OnInit, OnDestroy {\n  @Input() dateTo: number;\n  @Input() language = 'en';\n  @Input() reactive = true;\n  @Input() endMessage = 'countdown finish';\n  @Input() hideUnit = '';\n  @Input() styles =\n    'font-size:20px;color:#FFF;background-color:#000;padding:10px 5px;font-weight:bold;min-width:40px;text-align:center;';\n\n  public keywords: fromModel.CountdownKeywords;\n  public countdownResult: fromModel.CountdownResult;\n  public dateNow: number;\n  public totalSecondes: number;\n  public interval$: Observable<number>;\n\n  constructor(private elementRef: ElementRef) {}\n\n  ngOnInit() {\n    this.getDateNow();\n    this.setLanguage(this.language);\n    this.initSimpleCountdown();\n  }\n\n  ngOnDestroy() {}\n\n  private initSimpleCountdown(): void {\n    this.totalSecondes = this.dateTo - this.dateNow;\n    this.countdownResult = this.updateSimpleCountdown(this.totalSecondes);\n    this.createHTML();\n\n    this.interval$ = interval(1000).pipe(\n      takeUntil(this.componentDestroyed(this)),\n      filter(_ => this.reactive && this.totalSecondes > 0),\n      tap(_ => this.totalSecondes--),\n      tap(\n        _ =>\n          (this.countdownResult = this.updateSimpleCountdown(\n            this.totalSecondes\n          ))\n      ),\n      tap(_ => this.createHTML())\n    );\n\n    this.interval$.subscribe();\n  }\n\n  private createHTML(): void {\n    let o = '';\n\n    if (this.totalSecondes > 0) {\n      o = '<div style=\"display:flex;\">';\n\n      if (this.isContent('d')) {\n        if (this.countdownResult.day > 0) {\n          o += `<div style=\"${this.styles}\">\n          ${this.countdownResult.day}${this.keywords.day}\n          </div>`;\n        }\n      }\n\n      if (this.isContent('h')) {\n        if (this.countdownResult.hours > 0 || this.countdownResult.day > 0) {\n          o += `<div style=\"${this.styles}\">\n          ${this.countdownResult.hours}${this.keywords.hours}\n        </div>`;\n        }\n      }\n\n      if (this.isContent('m')) {\n        if (\n          (this.countdownResult.minutes > 0 ||\n            this.countdownResult.hours > 0 ||\n            this.countdownResult.day > 0) &&\n          this.reactive\n        ) {\n          o += `<div style=\"${this.styles}\">\n          ${this.countdownResult.minutes}${this.keywords.minutes}\n        </div>`;\n        }\n      }\n\n      if (this.isContent('s')) {\n        if (\n          (this.countdownResult.seconds > 0 ||\n            this.countdownResult.minutes > 0 ||\n            this.countdownResult.hours > 0 ||\n            this.countdownResult.day > 0) &&\n          this.reactive\n        ) {\n          o += `<div style=\"${this.styles}\">\n          ${this.countdownResult.seconds}${this.keywords.seconds}\n        </div>`;\n        }\n        o += '</div>';\n      }\n    } else {\n      if (this.endMessage !== '') {\n        o += `<div style=\"${this.styles}\">${this.endMessage}</div>`;\n      }\n    }\n\n    this.elementRef.nativeElement.innerHTML = o;\n  }\n\n  private isContent(unit: string): boolean {\n    return !this.hideUnit.includes(unit);\n  }\n\n  private updateSimpleCountdown(secondes: number): fromModel.CountdownResult {\n    const Seconds = Math.floor((secondes / 1) % 60);\n    const Minutes = Math.floor((secondes / 1 / 60) % 60);\n    const Hours = Math.floor((secondes / (1 * 60 * 60)) % 24);\n    const Day = Math.floor(secondes / (1 * 60 * 60 * 24));\n\n    return {\n      day: Day,\n      hours: Hours,\n      minutes: Minutes,\n      seconds: Seconds\n    };\n  }\n\n  private getDateNow(): void {\n    this.dateNow = Math.floor(Date.now() / 1000);\n  }\n\n  private setLanguage(language: string): void {\n    if (language === 'fr') {\n      this.keywords = {\n        seconds: 's',\n        minutes: 'm',\n        hours: 'h',\n        day: 'j'\n      };\n    } else if (language === 'de') {\n      this.keywords = {\n        seconds: 'z',\n        minutes: 'm',\n        hours: 's',\n        day: 't'\n      };\n    } else if (language === 'es' || language === 'pt') {\n      this.keywords = {\n        seconds: 's',\n        minutes: 'm',\n        hours: 's',\n        day: 'd'\n      };\n    } else if (language === 'cs') {\n      this.keywords = {\n        seconds: 's',\n        minutes: 'm',\n        hours: 'h',\n        day: 'd'\n      };\n    } else if (language === 'pl') {\n      this.keywords = {\n        seconds: 's',\n        minutes: 'm',\n        hours: 'g',\n        day: 'd'\n      };\n    } else {\n      this.keywords = {\n        seconds: 's',\n        minutes: 'm',\n        hours: 'h',\n        day: 'd'\n      };\n    }\n  }\n\n  private componentDestroyed(component: OnDestroy) {\n    const oldNgOnDestroy = component.ngOnDestroy;\n    const destroyed$ = new ReplaySubject<void>(1);\n    component.ngOnDestroy = () => {\n      oldNgOnDestroy.apply(component);\n      destroyed$.next(undefined);\n      destroyed$.complete();\n    };\n    return destroyed$;\n  }\n}\n","import { NgModule } from \"@angular/core\";\nimport { NgxSimpleCountdownDirective } from \"./ngx-simple-countdown.directive\";\n\n@NgModule({\n  declarations: [NgxSimpleCountdownDirective],\n  imports: [],\n  exports: [NgxSimpleCountdownDirective]\n})\nexport class NgxSimpleCountdownModule {}\n"]}