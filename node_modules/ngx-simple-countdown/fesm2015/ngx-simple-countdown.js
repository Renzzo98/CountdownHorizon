import { Directive, Input, ElementRef, NgModule } from '@angular/core';
import { interval, ReplaySubject } from 'rxjs';
import { tap, takeUntil, filter } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgxSimpleCountdownDirective {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.language = 'en';
        this.reactive = true;
        this.endMessage = 'countdown finish';
        this.hideUnit = '';
        this.styles = 'font-size:20px;color:#FFF;background-color:#000;padding:10px 5px;font-weight:bold;min-width:40px;text-align:center;';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.getDateNow();
        this.setLanguage(this.language);
        this.initSimpleCountdown();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() { }
    /**
     * @private
     * @return {?}
     */
    initSimpleCountdown() {
        this.totalSecondes = this.dateTo - this.dateNow;
        this.countdownResult = this.updateSimpleCountdown(this.totalSecondes);
        this.createHTML();
        this.interval$ = interval(1000).pipe(takeUntil(this.componentDestroyed(this)), filter((/**
         * @param {?} _
         * @return {?}
         */
        _ => this.reactive && this.totalSecondes > 0)), tap((/**
         * @param {?} _
         * @return {?}
         */
        _ => this.totalSecondes--)), tap((/**
         * @param {?} _
         * @return {?}
         */
        _ => (this.countdownResult = this.updateSimpleCountdown(this.totalSecondes)))), tap((/**
         * @param {?} _
         * @return {?}
         */
        _ => this.createHTML())));
        this.interval$.subscribe();
    }
    /**
     * @private
     * @return {?}
     */
    createHTML() {
        /** @type {?} */
        let o = '';
        if (this.totalSecondes > 0) {
            o = '<div style="display:flex;">';
            if (this.isContent('d')) {
                if (this.countdownResult.day > 0) {
                    o += `<div style="${this.styles}">
          ${this.countdownResult.day}${this.keywords.day}
          </div>`;
                }
            }
            if (this.isContent('h')) {
                if (this.countdownResult.hours > 0 || this.countdownResult.day > 0) {
                    o += `<div style="${this.styles}">
          ${this.countdownResult.hours}${this.keywords.hours}
        </div>`;
                }
            }
            if (this.isContent('m')) {
                if ((this.countdownResult.minutes > 0 ||
                    this.countdownResult.hours > 0 ||
                    this.countdownResult.day > 0) &&
                    this.reactive) {
                    o += `<div style="${this.styles}">
          ${this.countdownResult.minutes}${this.keywords.minutes}
        </div>`;
                }
            }
            if (this.isContent('s')) {
                if ((this.countdownResult.seconds > 0 ||
                    this.countdownResult.minutes > 0 ||
                    this.countdownResult.hours > 0 ||
                    this.countdownResult.day > 0) &&
                    this.reactive) {
                    o += `<div style="${this.styles}">
          ${this.countdownResult.seconds}${this.keywords.seconds}
        </div>`;
                }
                o += '</div>';
            }
        }
        else {
            if (this.endMessage !== '') {
                o += `<div style="${this.styles}">${this.endMessage}</div>`;
            }
        }
        this.elementRef.nativeElement.innerHTML = o;
    }
    /**
     * @private
     * @param {?} unit
     * @return {?}
     */
    isContent(unit) {
        return !this.hideUnit.includes(unit);
    }
    /**
     * @private
     * @param {?} secondes
     * @return {?}
     */
    updateSimpleCountdown(secondes) {
        /** @type {?} */
        const Seconds = Math.floor((secondes / 1) % 60);
        /** @type {?} */
        const Minutes = Math.floor((secondes / 1 / 60) % 60);
        /** @type {?} */
        const Hours = Math.floor((secondes / (1 * 60 * 60)) % 24);
        /** @type {?} */
        const Day = Math.floor(secondes / (1 * 60 * 60 * 24));
        return {
            day: Day,
            hours: Hours,
            minutes: Minutes,
            seconds: Seconds
        };
    }
    /**
     * @private
     * @return {?}
     */
    getDateNow() {
        this.dateNow = Math.floor(Date.now() / 1000);
    }
    /**
     * @private
     * @param {?} language
     * @return {?}
     */
    setLanguage(language) {
        if (language === 'fr') {
            this.keywords = {
                seconds: 's',
                minutes: 'm',
                hours: 'h',
                day: 'j'
            };
        }
        else if (language === 'de') {
            this.keywords = {
                seconds: 'z',
                minutes: 'm',
                hours: 's',
                day: 't'
            };
        }
        else if (language === 'es' || language === 'pt') {
            this.keywords = {
                seconds: 's',
                minutes: 'm',
                hours: 's',
                day: 'd'
            };
        }
        else if (language === 'cs') {
            this.keywords = {
                seconds: 's',
                minutes: 'm',
                hours: 'h',
                day: 'd'
            };
        }
        else if (language === 'pl') {
            this.keywords = {
                seconds: 's',
                minutes: 'm',
                hours: 'g',
                day: 'd'
            };
        }
        else {
            this.keywords = {
                seconds: 's',
                minutes: 'm',
                hours: 'h',
                day: 'd'
            };
        }
    }
    /**
     * @private
     * @param {?} component
     * @return {?}
     */
    componentDestroyed(component) {
        /** @type {?} */
        const oldNgOnDestroy = component.ngOnDestroy;
        /** @type {?} */
        const destroyed$ = new ReplaySubject(1);
        component.ngOnDestroy = (/**
         * @return {?}
         */
        () => {
            oldNgOnDestroy.apply(component);
            destroyed$.next(undefined);
            destroyed$.complete();
        });
        return destroyed$;
    }
}
NgxSimpleCountdownDirective.decorators = [
    { type: Directive, args: [{
                selector: '[simpleCountdown]'
            },] }
];
/** @nocollapse */
NgxSimpleCountdownDirective.ctorParameters = () => [
    { type: ElementRef }
];
NgxSimpleCountdownDirective.propDecorators = {
    dateTo: [{ type: Input }],
    language: [{ type: Input }],
    reactive: [{ type: Input }],
    endMessage: [{ type: Input }],
    hideUnit: [{ type: Input }],
    styles: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgxSimpleCountdownModule {
}
NgxSimpleCountdownModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NgxSimpleCountdownDirective],
                imports: [],
                exports: [NgxSimpleCountdownDirective]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgxSimpleCountdownModule, NgxSimpleCountdownDirective };

//# sourceMappingURL=ngx-simple-countdown.js.map